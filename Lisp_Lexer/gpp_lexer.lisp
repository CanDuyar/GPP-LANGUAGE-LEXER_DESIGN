
;function for doing lexical analysis according to dfa
(defun dfa(str_param outfile)
    
;flag1 for mult operation    
    (let( (test 0)(flag1 nil) (flag2 nil)(List_of_others '( #\? #\! #\$ #\; #\& #\_)) (List_of_digits (list #\0 #\1 #\2 #\3 #\4 #\5 #\6 #\7 #\8 #\9)) 
          (letters '(#\a #\b #\c #\d #\e #\f #\g #\h #\i #\j #\k #\l #\m #\n #\o #\p #\q #\r #\s #\t #\u #\v #\w #\x #\y #\z)) )
        (loop for index from 0 to (- (length str_param) 1)
            do
            (setq flag2 nil)
            (setq flag1 nil)

            (loop while (and (or (equal (char str_param index) #\Space) (equal (char str_param index) #\newline) (equal (char str_param index) #\tab)) (< index (- (length str_param) 1)) )
                do
                (setq index (+ index 1))
            )

            
            (if (<= (+ index 1) (- (length str_param) 1))
                (when (equal (subseq str_param index (+ index 2)) "or")
                    (let ((flag t))
                        (if (<= (+ index 2) (- (length str_param) 1)) 
                            (if (and (not (member (char str_param (+ index 2)) List_of_digits)) (not (member (char str_param (+ index 2)) letters)))
                                (setq flag t)
                                (setq flag nil)
                            )
                        )
                        (when flag
                            (format outfile "KW_OR~%")
                            (setq flag2 T)
                            (setq index (+ index 1))
                        )
                    )  
                )
            )

            (if (<= (+ index 1) (- (length str_param) 1))
                (when (and (< (+ index 2) (length str_param))(equal (subseq str_param index (+ index 2)) ";;"))
                    (format outfile "COMMENT~%")
                    (setq flag2 T)
                    (return-from dfa)
                )
                  

            )

            (when (equal (subseq str_param index (+ index 1)) "+")
                (format outfile "OP_PLUS~%")
                (setq flag2 T)
            )
            (if (<= (+ index 1) (- (length str_param) 1))
                (when (equal (subseq str_param index (+ index 2)) "if")
                    (let ((flag t))
                        (if (<= (+ index 2) (- (length str_param) 1)) 
                            (if (and (not (member (char str_param (+ index 2)) List_of_digits)) (not (member (char str_param (+ index 2)) letters)))
                                (setq flag t)
                                (setq flag nil)
                            )
                        )
                        (when flag
                            (format outfile "KW_IF~%")
                            (setq flag2 T)
                            (setq index (+ index 1))
                        )
                    ) 
                )
            )



            (when (and (equal (subseq str_param index (+ index 1)) "-"))

                (format outfile "OP_MINUS~%")
                (setq flag2 T)
            )


            (when (equal (subseq str_param index (+ index 1)) "/")
                (format outfile "OP_DIV~%")
                (setq flag2 T)
            )
            (when (and (equal (subseq str_param index (+ index 1)) "*") (equal flag1 nil))
                (format outfile "OP_MULT~%")
                (setq flag2 T)
            )

            (if (<= (+ index 1) (- (length str_param) 1))
                (when (equal (subseq str_param index (+ index 2)) "**")
                    (format outfile "OP_DBLMULT~%")
                    (setq flag2 T)
                    (setq index (+ index 1))
                    (setq flag1 t)
                )
            )

            (when (equal (subseq str_param index (+ index 1)) "(")
                (format outfile "OP_OP~%")
                (setq flag2 T)
            )
            (when (equal (subseq str_param index (+ index 1)) ")")
                (format outfile "OP_CP~%")
                (setq flag2 T)
            )
            (when (equal (subseq str_param index (+ index 1)) ",")
                (format outfile "OP_COMMA~%")
                (setq flag2 T)
            )
            (when (equal (subseq str_param index (+ index 1)) "\"")
                (if (= (mod test 2) 0)
                    (format outfile "OP_OC~%")
                (format outfile "OP_CC~%")
                )
                (setq test (+ test 1))
                (setq flag2 T)
            )
            (if (<= (+ index 2) (- (length str_param) 1))
                (when (equal (subseq str_param index (+ index 3)) "and")
                    (let ((flag t))
                        (if (<= (+ index 3) (- (length str_param) 1)) 
                            (if (and (not (member (char str_param (+ index 3)) List_of_digits)) (not (member (char str_param (+ index 3)) letters)))
                                (setq flag t)
                                (setq flag nil)
                            )
                        )
                        (when flag
                            (format outfile "KW_AND~%")
                            (setq flag2 T)
                            (setq index (+ index 2))
                        )
                    )       
                )
            )
            (if (<= (+ index 2) (- (length str_param) 1))
                (when (equal (subseq str_param index (+ index 3)) "not")
                    (let ((flag t))
                        (if (<= (+ index 3) (- (length str_param) 1)) 
                            (if (and (not (member (char str_param (+ index 3)) List_of_digits)) (not (member (char str_param (+ index 3)) letters)))
                                (setq flag t)
                                (setq flag nil)
                            )
                        )
                        (when flag
                            (format outfile "KW_NOT~%")
                            (setq flag2 T)
                            (setq index (+ index 2))
                        )
                    )   
                )
            )
            (if (<= (+ index 2) (- (length str_param) 1))
                (when (equal (subseq str_param index (+ index 3)) "nil")
                    (let ((flag t))
                        (if (<= (+ index 3) (- (length str_param) 1)) 
                            (if (and (not (member (char str_param (+ index 3)) List_of_digits)) (not (member (char str_param (+ index 3)) letters)))
                                (setq flag t)
                                (setq flag nil)
                            )
                        )
                        (when flag
                            (format outfile "KW_NIL~%")
                            (setq flag2 T)
                            (setq index (+ index 2))
                        )
                    )  
                )
            )
            (if (<= (+ index 2) (- (length str_param) 1))
                (when (equal (subseq str_param index (+ index 3)) "set")
                    (let ((flag t))
                        (if (<= (+ index 3) (- (length str_param) 1)) 
                            (if (and (not (member (char str_param (+ index 3)) List_of_digits)) (not (member (char str_param (+ index 3)) letters)))
                                (setq flag t)
                                (setq flag nil)
                            )
                        )
                        (when flag
                            (format outfile "KW_SET~%")
                            (setq flag2 T)
                            (setq index (+ index 2))
                        )
                    )  
                )
            )
            (if (<= (+ index 2) (- (length str_param) 1))
                (when (equal (subseq str_param index (+ index 3)) "for")
                    (let ((flag t))
                        (if (<= (+ index 3) (- (length str_param) 1)) 
                            (if (and (not (member (char str_param (+ index 3)) List_of_digits)) (not (member (char str_param (+ index 3)) letters)))
                                (setq flag t)
                                (setq flag nil)
                            )
                        )
                        (when flag
                            (format outfile "KW_FOR~%")
                            (setq flag2 T)
                            (setq index (+ index 2))
                        )
                    )  
                )
            )
            (if (<= (+ index 3) (- (length str_param) 1))
                (when (equal (subseq str_param index (+ index 4)) "less")
                    (let ((flag t))
                        (if (<= (+ index 4) (- (length str_param) 1)) 
                            (if (and (not (member (char str_param (+ index 4)) List_of_digits)) (not (member (char str_param (+ index 4)) letters)))
                                (setq flag t)
                                (setq flag nil)
                            )
                        )
                        (when flag
                            (format outfile "KW_LESS~%")
                            (setq index (+ index 3))
                            (setq flag2 T)
                        )
                    )    
                )
            )
            (when (<= (+ index 3) (- (length str_param) 1)) 
                (when (equal (subseq str_param index (+ index 4)) "list")
                    (let ((flag t))
                        (if (<= (+ index 4) (- (length str_param) 1)) 
                            (if (and (not (member (char str_param (+ index 4)) List_of_digits)) (not (member (char str_param (+ index 4)) letters)))
                                (setq flag t)
                                (setq flag nil)
                            )
                        )
                        (when flag
                            (format outfile "KW_LIST~%")
                            (setq index (+ index 3))
                            (setq flag2 T)
                        )
                    )    
                )
            )
            (if (<= (+ index 3) (- (length str_param) 1))
                (when (equal (subseq str_param index (+ index 4)) "load")
                    (let ((flag t))
                        (if (<= (+ index 4) (- (length str_param) 1)) 
                            (if (and (not (member (char str_param (+ index 4)) List_of_digits)) (not (member (char str_param (+ index 4)) letters)))
                                (setq flag t)
                                (setq flag nil)
                            )
                        )
                        (when flag
                            (format outfile "KW_LOAD~%")
                            (setq index (+ index 3))
                            (setq flag2 T)
                        )
                    ) 
                )
            )
            (if (<= (+ index 3) (- (length str_param) 1))
                (when (equal (subseq str_param index (+ index 4)) "exit")
                    (let ((flag t))
                        (if (<= (+ index 4) (- (length str_param) 1)) 
                            (if (and (not (member (char str_param (+ index 4)) List_of_digits)) (not (member (char str_param (+ index 4)) letters)))
                                (setq flag t)
                                (setq flag nil)
                            )
                        )
                        (when flag
                            (format outfile "KW_EXIT~%")
                            (setq index (+ index 3))
                            (setq flag2 T)
                        )
                    )
                )
            )
            (if (<= (+ index 3) (- (length str_param) 1))
                (when (equal (subseq str_param index (+ index 4)) "disp")
                    (let ((flag t))
                        (if (<= (+ index 4) (- (length str_param) 1)) 
                            (if (and (not (member (char str_param (+ index 4)) List_of_digits)) (not (member (char str_param (+ index 4)) letters)))
                                (setq flag t)
                                (setq flag nil)
                            )
                        )
                        (when flag
                            (format outfile "KW_DISP~%")
                            (setq index (+ index 3))
                            (setq flag2 T)
                        )
                    )
                )
            )
            (if (<= (+ index 3) (- (length str_param) 1))
                (when (equal (subseq str_param index (+ index 4)) "true")
                    (let ((flag t))
                        (if (<= (+ index 4) (- (length str_param) 1)) 
                            (if (and (not (member (char str_param (+ index 4)) List_of_digits)) (not (member (char str_param (+ index 4)) letters)))
                                (setq flag t)
                                (setq flag nil)
                            )
                        )
                        (when flag
                            (format outfile "KW_TRUE~%")
                            (setq index (+ index 3))
                            (setq flag2 T)
                        )
                    )
                )
            )

            (if (<= (+ index 5) (- (length str_param) 1))
                (when (equal (subseq str_param index (+ index 6)) "append")
                    (let ((flag t))
                        (if (<= (+ index 6) (- (length str_param) 1)) 
                            (if (and (not (member (char str_param (+ index 6)) List_of_digits)) (not (member (char str_param (+ index 6)) letters)))
                                (setq flag t)
                                (setq flag nil)
                            )
                        )
                        (when flag
                            (format outfile "KW_APPEND~%")
                            (setq index (+ index 5))
                            (setq flag2 T)
                        )
                    )
                )
            )

            (if (<= (+ index 4) (- (length str_param) 1))
                (when (equal (subseq str_param index (+ index 5)) "equal")
                    (let ((flag t))
                        (if (<= (+ index 5) (- (length str_param) 1)) 
                            (if (and (not (member (char str_param (+ index 5)) List_of_digits)) (not (member (char str_param (+ index 5)) letters)))
                                (setq flag t)
                                (setq flag nil)
                            )
                        )
                        (when flag
                            (format outfile "KW_EQUAL~%")
                            (setq index (+ index 4))
                            (setq flag2 T)
                        )
                    )
                )
            )
            (if (<= (+ index 4) (- (length str_param) 1))
                (when (equal (subseq str_param index (+ index 5)) "false")
                    (let ((flag t))
                        (if (<= (+ index 5) (- (length str_param) 1)) 
                            (if (and (not (member (char str_param (+ index 5)) List_of_digits)) (not (member (char str_param (+ index 5)) letters)))
                                (setq flag t)
                                (setq flag nil)
                            )
                        )
                        (when flag
                            (format outfile "KW_FALSE~%")
                            (setq index (+ index 4))
                            (setq flag2 T)
                        )
                    )
                )
            )

            (if (<= (+ index 5) (- (length str_param) 1))
                (when (equal (subseq str_param index (+ index 6)) "concat")
                    (let ((flag t))
                        (if (<= (+ index 6) (- (length str_param) 1)) 
                            (if (and (not (member (char str_param (+ index 6)) List_of_digits)) (not (member (char str_param (+ index 6)) letters)))
                                (setq flag t)
                                (setq flag nil)
                            )
                        )
                        (when flag
                            (format outfile "KW_CONCAT~%")
                            (setq index (+ index 5))
                            (setq flag2 T)
                        )
                    ) 
                )
            )
            (if (<= (+ index 5) (- (length str_param) 1))
                (when (equal (subseq str_param index (+ index 6)) "deffun")
                    (let ((flag t))
                        (if (<= (+ index 6) (- (length str_param) 1)) 
                            (if (and (not (member (char str_param (+ index 6)) List_of_digits)) (not (member (char str_param (+ index 6)) letters)))
                                (setq flag t)
                                (setq flag nil)
                            )
                        )
                        (when flag
                            (format outfile "KW_DEFFUN~%")
                            (setq index (+ index 5))
                            (setq flag2 T)
                        )
                    )
                )
            )
            (when (and (member (char str_param index) List_of_digits))

                (setq gtu 0)
            
                (if (<= (+ index 1) (- (length str_param) 1))
                    (when (and (equal (char str_param index) #\0) (not (member (char str_param (+ index 1)) List_of_digits)))
                        (setq flag2 T)
                        (setq gtu 1)
                    )
                )
                (when (and (= index (- (length str_param) 1)) (equal (char str_param index) #\0))
                    (setq flag2 T)
                    (setq gtu 1)
                    (setq can2 3)
                )
                
                (when (not (equal (char str_param index) #\0))
                    (loop while (and (member (char str_param index) List_of_digits) (<= index (- (length str_param) 1)))
                        do
                        (setq index (+ index 1))           
                    )
                    (setq index (- index 1))
                    (setq flag2 T)
                    (setq gtu 1)
                   
                )

                

                (loop while(member (char str_param (+ index 1)) letters)
                    do 
                      (setq index (+ index 1))                      
                      (if(= gtu 1)(format outfile "ERROR~%"))

                      (setq gtu 0)
                )

                (if(and (= gtu 1))
                    (format outfile "VALUE~%"))


            )
            
            (when (and (equal flag2 nil) (member (char-downcase (char str_param index)) letters))
                (loop while (and (or (member (char-downcase (char str_param index)) letters) (member (char str_param index) List_of_digits) ) (<= index (- (length str_param) 1)))
                    do
                    (setq index (+ index 1))
                )
                (format outfile "IDENTIFIER~%")
                (setq index (- index 1))
                (setq flag2 T)     
            )
            
            (when (and (equal flag2 nil) (not (or (equal (char str_param index) #\Space) (equal (char str_param index) #\newline) (equal (char str_param index) #\tab))))
                (format outfile "ERROR~%" )

                
                (if (and (member (char str_param index) List_of_others)(member (char str_param (+ index 1))letters))
                	(format outfile "IDENTIFIER~%")
                )

                (loop while(or (member (char str_param index) List_of_digits) (member (char str_param index) letters) (member (char str_param index) List_of_others))
                	do (setq index (+ index 1))
                		   
                )



                (setq index (- index 1))
            )
        )
    )
)




;this function runs with "reading from file mode" or "reading from terminal mode" 
(defun gppinterpreter( &optional fn ) ; optional parameter means we don't always have to give a filename as a parameter.
    (if (equal fn nil)
        (terminalOrfile) ;without filename(reading from terminal mode)
    	(terminalOrfile fn) ;with filename(reading from file mode)
    )
)

(defun terminalOrfile(&optional fn_param)

;creating a file to print outputs for two modes(terminal and file modes)
    (with-open-file (outfile "parsed_lisp.txt" 
                     :direction :output
                     :if-exists :supersede
                     :if-does-not-exist :create)

;****************************condition for terminal mode****************************
    (if (equal fn_param nil)
            (let ((terminal_input " "))

; if user enters "" then exit from the program
        (loop while (not (equal terminal_input ""))
            do
            (format t "~%>_ ") ;terminal symbol
            (setq terminal_input (read-line))            
            (dfa terminal_input outfile) ;lexical analysis for our language
        )
    )
)
;**********************************condition for file mode****************************
    (if (not(equal fn_param nil))
        (let ((word-list (list )))       
            (with-open-file (of fn_param) ;reads from the file which is given as terminal argument
                (when of                  ; ------>  clisp gpp_lexer.lisp filename.txt
                    (loop for temp = (read-line of nil)
                        while temp 
                            do 
                            (dfa (concatenate 'string temp " ") outfile) ;lexical analysis for our language
                    )
                    (close of)
                )
            )
        )
     )
  )
)

;main function 
(defun main()
    ;if terminal argument is null
  (if (null *args*) 
        (gppinterpreter)
        (gppinterpreter (car *args*)) ;else condition
    )

)

;it runs whole program
(main)
